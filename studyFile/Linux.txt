df命令:显示文件系统的磁盘使用情况统计
VIM命令模式x表示删除，删除一个字母 长按一直删除，nx 删除几个字母  :wq!强制保存推出--用于没有写入权限的时候
dd 删除一行 数字+dd 删除几行 -- 剪切功能 按下p就把删除的粘贴出来了 小写的p默认粘贴在光标的下方，大写的P粘贴上方
:1,10d 删除1到10行
yy 复制 数字+yy 复制几行 小写的p默认粘贴在光标的下方，大写的P粘贴上方
0跳到行首 $跳到行尾  数字G 跳到第几行 G行尾 :n移动到第几行
: set nu 显示行号
ctrl+f 向下翻页 ctrl+b 向上翻页 ctrl+u向上翻半页 ctrl+d 向下翻半页
:1,10s/old/new/g 替换1到10行的把old变成new
:%s/old/new/g 把全文的 old变成new
/内容 向下查找
?内容 向上查找  下一个n 上一个N
u 撤销 ctrl+r 反撤销
history 查看历史命令
-c 删除所有历史记录


Linux 命令:
命令格式
  命令 参数 格式
  参数: 长格式 例如 --help  服务 程序调试---->额外参数
        短格式 例如 -h  执行简单的命令

命令不知道 怎么解决 查看帮助命令
man 帮助命令 Linux外部命令
help 帮助命令 Linux内部命令 内核自带的
用 type 查看 type man ，type help
man 加 命令名 用于查看命令的使用和参数
空格---向下翻一页

echo 输出字符串或变量
date 显示及设置时间的命令 用+开始
%t TAB键 %H 小时(24制度) %I 小时(12制度) %M 分钟 %S 秒 %j 这一天是这一年的第几天 %Y 年 %m 月 %d 日
例如 date "+%Y-%m-%d %H:%M:%S" 会显示2023-02-13 21:24:24
date -s "2023-02-13 21:24:24" 设置时间

reboot 命令 设备重启
poweroff 关机 shutdown 关机

wget 下载 wget+url
-b 后台下载  -P 指定目录 -t 最大尝试次数 -c断点续传 -p下载页面所有资源 -r递归下载(当前站点的所有目录和目录里面的)

ps 查看系统进程状态 主要用于抓取PID
-a 显示所有进程(包括其他用户的进程)
-u 用户以及其他详细信息
-x 显示没有控制终端的进程


top 任务管理器 用于动态的监视进程活动和系统负载信息
 swap 虚拟内存  内存不够

pidof 查看服务的pid

kill 终止服务

killall 终止一类服务 后面跟服务名  例如 killall tomcat

系统状态检测命令
ifconfig/ipaddr 查看ip

uname  查看系统内核和系统版本
-a 详细信息
-r 查看内核版本

uptime 查看系统负载信息

free 显示系统内存使用信息

who 当前登录的主机终端信息

last 查询系统登录的记录

工作目录切换命令
tree 展示目录
cd - 返回上次所在目录

tee指令会从标准输入设备读取数据，将其内容输出到标准输出设备，同时保存成文件。
-a或--append 　附加到既有文件的后面，而非覆盖它

cat 查看文件 内容较少的 -n 显示行号
more 长文本 显示百分比 不能回翻
less 长文本 显示百分比
head 查看头 默认10行  -n 显示几行
tail 尾部 默认10行  -n 显示几行 -f用于动态查看

diff 比较多个文本的区别 以行为基准

touch 创建文件

tr 替换  cat  test.txt | tr 'm' 'M' 把m替换成M

> 把内容写进文件 会覆盖 >> 追加写 不会覆盖

mkdir 创建目录 -p 多级目录

&表示任务在后台执行

wc 统计
-l 行数

转义符
 反斜杠 \ 进行转移 例如 echo echo 就会输出echo
 单引号 转义其中的变量变成字符串 例如 echo 'echo' 就会输出echo
 双引号 保留其中的变量，不进行转义 例如 $cc=1 echo "uuu $cc" 就会输出 uuu 1
 反引号 `` 把其中的命令的结果进行返回 -->就是执行里面的命令 然后返回结果

0 表示stdin标准输入
1 表示stdout标准输出
2 表示stderr标准错误

输入重定向 <
符号                                      作用
命令 < 文件                   将文件作为命令的标准输入
命令 << 分界符                从标准输入中读入，知道遇见分界符才停止
命令 文件1 文件2              将文件1作为命令的标准输入并将标准输出到文件2


输出重定向 >
符号                                      作用
命令 > 文件                  将标准输出到文件 原有内容会被覆盖
命令 2> 文件                 将错误输出到文件 原有内容会被覆盖
命令 >> 文件                 将标准输出追加到文件
命令 2>>文件                 将错误输出追加到文件
命令 >> 文件    2>&1         将错误输出和正确的追加到文件

alias 用于对命令取别名 alias 别名 = 命令 取消 unalias

bash解释器 内部命令直接执行  外部解释执行
type 查看命令是内部还是外部

env命令查看系统变量

用户和权限
多用户多任务操作系统

UID---用户Id
GID---组ID
Linux三类用户
超级用户 UID=GID=0  可以修改所有人密码
系统用户 UID 范围1-499 使某些服务具备特殊的用户
普通用户 一般通过超级用户创建的 默认500开始  只能修改自己的密码

同一个组内用户ID唯一
添加用户 useradd 修改 usermod    删除userdel -f强制删除  -r删除家目录(不删除可以用来恢复用户)
添加组 groupadd  修改 groupmod   删除groupdel
id 用户 查看用户

password命令 修改用户密码

文件的权限和归属 w-2 写 r-4读 x-1执行
文件第一个代表文件类型
f或- 普通文件    d 目录  l 链接-软连接(快捷方式)硬链接--完整的复制    b块文件--设备     c字符文件--虚拟终端    s数据库文件
文件权限9位
前三位--文件所有者
中三位--文件所属组
后三位--其他用户
chmod文件 更改文件权限
删除文件要看他的目录有没有删除权限

文件特殊权限 SUID 使 setuid 针对二进制程序执行者

su 用户 切换用户
sudo 命令 给普通用户提供权限完成本来由超级用户来完成的任务


shell编程分为交互式和批处理
第一行一般为注释 #/bin/bash shell的版本
第二行一般为脚本的作用

判断 [] 前后要有空格

判断 成功返回0 失败返回非零随机数 一般是1
-e文件是否存在 f是否使普通文件 -d是否为目录类型 -r是否由读取权限 -w -x

数字比较
-eq 等于 -ne 不等于 -gt 大于  -lt 小于  -le 小于等于  -ge  大于等于

字符串 -z 判断是否为空

let 执行 例如想让一个变量自增 let num++

if语句
if 条件
 then
elif 条件
 then
else
 执行内容 不需要then
fi

for或while
for/while ((i=0;i<3;i++))  或 变量(i) in 范围 --条件
do
执行内容
done

case 变量/表达式 in
变量/表达式)
执行内容
;;当前匹配结束
匹配值)
执行内容
;;
*)
执行内容
esac 结束

定时任务:一次性和长期
一次性 at命令
at+时间 后可以输入这个点要执行的命令  ctrl+d结束
atrm + 上at -l 前面显示的数字 删除
at -l 显示 查看需要执行的at命令

周期 crond服务
crontab -e  添加周期任务
crontab -u 编辑他人任务 root身份才可以

分 时 日 月 星期(0-7 0和7都代表星期天)

25 3 * * 1,3,5  sh /home/test.sh 代表每周135 三点二十五分执行这个脚本

,表示多个时间段 1,3,5 表示1 3 5
- 表示范围 1-3 表示1 2 3
/代表间隔  */25 * * * * 每隔25分钟执行一次
日期和星期不能同时使用

find命令
find path -name  根据名字在当前路径下查找
xargs 标准输入 例如 xargs -n 4 < test.txt 把test.txt内容4行变成一行打印输出

| xargs -i 命令 {} 全部匹配然后执行
-exec 命令 {}\; 匹配一行执行一次
和find一起使用 例如 find / -name test.txt | xargs -r rm -rf {} 表示删除这个路径下的所有test.txt

grep 查找文本内容 符合的文本行显示出来
 -E 启用正则
 -i：忽略大小写进行匹配。
 -r：递归查找子目录中的文件。
 -c：只打印匹配的行数。

命令的替换$()和反引号``  $() 里面是命令
例如 想要输出 date
echo date 这样会输出 date 这个字符串
echo `date`  这样才会输出日期 或者 echo $(date)


$0 是脚本本身的名字
$1-n 是参数
例如 sh /test/sh 1 2 3 4 $0是test.sh $1=1 $2=2
$* 向脚本传递的参数 1 2 3 4
$# 传递到脚本参数的个数 4个
$? 上一个程序执行的结果 0 正确 其他错误
$! 上一个后台指令的pid
$$ 当前进程的pid
$@ 所有的参数

数学运算符 expr命令 0是false  1 是正确

expr length "12" 字符串长度
expr substr "1234" 1 2 从第一位置开始 取2个长度  下标是从1开始
expr 1 \> 2 符号之间要有空格 结果为0
a++ 代表 a=a+1
可以使用(()) 例如 ((q=1+2*3+1)) 或 q=((1+2*3+1))适用于数字处理



read 命令从键盘上读取一个值 如果没有指定变量名字 默认赋值给reply
多个值 以空格分割
例如 read a b  输入 hello word  a=hello b=word
read -s 输入的值隐藏起来 赋值给变量 例如linux登录输入密码
read -p '提示' 输入时就会显示提示
read -r 可以输入特殊字符 换行就会结束

test 命令 判断条件是否成立 $?=0 成立反之假
和[]判断效果一样
字符串的比较  ==  !=  -z 长度为0  -n 长度不为空  >  < 这两个要转意

sh文件 #后面有空格表示注释 后面直接有值表示默认值
日志清理 > /etc/message(日志文件) 这个命令就是清理日志的
[[]]和[]区别 [[]] 字符串<>不需要转义适用于字符串处理

shift命令 参数左移指令
每执行一次 参数左移一个 $#的值-1 移出去的参数不在可用

函数 定义方式
function name(){
  commands
}

name(){
 commands
}
函数的返回值 用return 整个函数直接推出 脚本不退出 exit脚本整个退出
取函数的返回值 执行玩函数后用$?
num=$(name) 取的是函数里面echo的内容 如果有多个就是多个联合在一起

函数调用 name 参数1 参数2  取参数 $1 $2

sed 流编辑器  支持正则 使用扩展正则则加参数-r
是一行一行处理内容 处理完成后进行输入或者修改 处理时  把当前处理的行存储在临时缓冲区 称为 模式空间
接着用sed命令处理缓冲区的内容 处理完成后 把缓冲区的内容送往屏幕 接着处理下一行 文件内容没有改变

sed 命令 文件
-a 在当前行下面插入文件
-n 读取下一个输入行 用下一个命令处理新的行而不是第一个命令
-e 执行多个sed指令
-f 运行脚本
-i 编辑文件内容
-i.bak 编辑的同时创造.bak备份
-r 使用扩展的正则表达式

命令
i 在当前行上面插入文件
a  在当前行下面插入文件
c 把选定的行改为新的指定的文本
p 打印
d 删除
w 另存
s 查找

替换
s/root/tt/ 只把第一个root替换成tt s/root/tt/g 全部替换
如果替换的内如有\ 可以把原先的\换成# 's#/bin/bash#tt#' 把 /bin/bash换成tt
2s/root/tt/  只替换第二行的
2,$s/root/tt/g  第二行到最后


cut 命令 显示行中的指定部分 删除文件的指定字段
两个功能 显示文件的内容 一依次读取参数file文件 将内容输出到标准输出上
连接多个文件 例如 cut f1 f2 > f3 将f1和f2内容和起来输入到文件f3上

-b 仅显示行中指定范围的内容 字节
-c 仅显示行中指定范围的字符
-d 指定字段的分割符 默认TAB
-f 显示指定字段的内容 第几列 -f1 第一列 以TAB分割后

N- 第N个到最后
N-M 第N个到M个
-M 到第几个
cut -c1-5 行中1-5字符

bash -v test.sh 检查脚本是否有语法错误
bash -x test.sh 检查脚本执行过程


awk 文本报告生成器 实现格式化文本输出
awk语句都是由模式和动作组成 一个awk脚本可以有多个语句 模式决定动作语句的触发条件和触发时间
模式: 正则表达式  关系表达式 匹配表达式 ~ 包含 !~ 不包含
动作: 变量 命令 内置函数 流控制语句

语法结构
awk [options] 'BEGIN {print 'start'} 'pattern{commands}' END{print 'end'}' file
其中BEGIN END 是awk的关键字 必须大写  开始和结束块是可选的 可以不出现

执行的三个步骤 读-- 执行  -- 重复
支持两种变量 内建变量和自定义变量
内置变量
$n 当前记录的第n个字段 n为1表示第一个字段  列的维度  ---
$0 这个变量包含执行过程中当前行的文本内容  ---
FILENAME 当前输入文件的名字
FS 字段分割符 默认空格   ---
NF 表示字段数 在执行过程中对应于当前的字段数 NF列的个数   ---
FNR 各文件分别计数的符号
NR 记录数 执行过程中对应的行号  ----
OFS 输出字段的分割符 默认一个空格
ORS 输出记录分割符 默认一个换行符
RS  记录分割符 默认一个换行符号


-F 指定 fs指定分割符  awk -F "指定的分隔符"
-v 赋值一个用户自定义变量
-f 指定脚本文件  从脚本中读取awk命令

多条命令可以使用;分割 {print $1;print $2} ({print $1 $2}) 只是举例分割
pattern 可以不写 可以写 模式






























